{"version":3,"file":"form-builder.d.ts","sources":["form-builder.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { FormBuilder as NativeFormBuilder } from '@angular/forms';\nimport { FbControlConfig, LegacyControlOptions, AbstractControlOptions, ValidatorFn, AsyncValidatorFn, ValidatorsModel, FormControlState } from './types';\nimport { FormGroup } from './form-group';\nimport { FormControl } from './form-control';\nimport { FormArray } from './form-array';\nexport declare class FormBuilder extends NativeFormBuilder {\n    /**\n     * Construct a new `FormGroup` instance.\n     *\n     * @param controlsConfig A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param options Configuration options object for the `FormGroup`. The object can\n     * have two shapes:\n     *\n     * 1) `AbstractControlOptions` object (preferred), which consists of:\n     * - `validators`: A synchronous validator function, or an array of validator functions\n     * - `asyncValidators`: A single async validator or array of async validator functions\n     * - `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |\n     * submit')\n     *\n     * 2) Legacy configuration object, which consists of:\n     * - `validator`: A synchronous validator function, or an array of validator functions\n     * - `asyncValidator`: A single async validator or array of async validator functions\n     */\n    group<T extends object = any, V extends object = ValidatorsModel>(controlsConfig: {\n        [P in keyof T]: FbControlConfig<T[P], V>;\n    }, options?: AbstractControlOptions | LegacyControlOptions | null): FormGroup<T, V>;\n    /**\n     * @description\n     * Construct a new `FormControl` with the given state, validators and options.\n     *\n     * @param formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n  ```ts\n  import {Component, Inject} from '@angular/core';\n  import {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\n  // ...\n  @Component({\n    selector: 'app-disabled-form-control',\n    template: `\n      <input [formControl]=\"control\" placeholder=\"First\">\n    `\n  })\n  export class DisabledFormControlComponent {\n    control: FormControl;\n  \n    constructor(private fb: FormBuilder) {\n      this.control = fb.control({value: 'my val', disabled: true});\n    }\n  }\n  ```\n     */\n    control<T = any, V extends object = ValidatorsModel>(formState?: FormControlState<T>, validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null): FormControl<T, V>;\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options.\n     *\n     * @param controlsConfig An array of child controls or control configs. Each\n     * child control is given an index when it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     */\n    array<Item = any, V extends object = ValidatorsModel>(controlsConfig: FbControlConfig<Item, V>[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null): FormArray<Item, V>;\n}\n"]}