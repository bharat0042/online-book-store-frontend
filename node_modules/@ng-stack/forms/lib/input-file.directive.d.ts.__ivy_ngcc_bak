import { ElementRef, Renderer2, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class InputFileDirective implements ControlValueAccessor {
    private elementRef;
    private renderer;
    private _multiple;
    get multiple(): boolean | string;
    set multiple(value: boolean | string);
    preserveValue: boolean | string;
    select: EventEmitter<File[]>;
    private onChange;
    private onTouched;
    constructor(elementRef: ElementRef, renderer: Renderer2);
    /**
     * Callback function that should be called when
     * the control's value changes in the UI.
     */
    callOnChange(event: any): void;
    /**
     * Writes a new value to the element.
     * This method will be called by the forms API to write
     * to the view when programmatic (model -> view) changes are requested.
     *
     * See: [ControlValueAccessor](https://angular.io/api/forms/ControlValueAccessor#members)
     */
    writeValue(fileList: FileList): void;
    /**
     * Registers a callback function that should be called when
     * the control's value changes in the UI.
     *
     * This is called by the forms API on initialization so it can update
     * the form model when values propagate from the view (view -> model).
     */
    registerOnChange(fn: () => void): void;
    /**
     * Registers a callback function that should be called when the control receives a change event.
     * This is called by the forms API on initialization so it can update the form model on change.
     */
    registerOnTouched(fn: () => void): void;
}
