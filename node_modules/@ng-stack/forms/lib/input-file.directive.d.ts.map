{"version":3,"file":"input-file.directive.d.ts","sources":["input-file.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2, EventEmitter } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare class InputFileDirective implements ControlValueAccessor {\n    private elementRef;\n    private renderer;\n    private _multiple;\n    get multiple(): boolean | string;\n    set multiple(value: boolean | string);\n    preserveValue: boolean | string;\n    select: EventEmitter<File[]>;\n    private onChange;\n    private onTouched;\n    constructor(elementRef: ElementRef, renderer: Renderer2);\n    /**\n     * Callback function that should be called when\n     * the control's value changes in the UI.\n     */\n    callOnChange(event: any): void;\n    /**\n     * Writes a new value to the element.\n     * This method will be called by the forms API to write\n     * to the view when programmatic (model -> view) changes are requested.\n     *\n     * See: [ControlValueAccessor](https://angular.io/api/forms/ControlValueAccessor#members)\n     */\n    writeValue(fileList: FileList): void;\n    /**\n     * Registers a callback function that should be called when\n     * the control's value changes in the UI.\n     *\n     * This is called by the forms API on initialization so it can update\n     * the form model when values propagate from the view (view -> model).\n     */\n    registerOnChange(fn: () => void): void;\n    /**\n     * Registers a callback function that should be called when the control receives a change event.\n     * This is called by the forms API on initialization so it can update the form model on change.\n     */\n    registerOnTouched(fn: () => void): void;\n}\n"]}